import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { IDLE_STATUS, LOADING_STATUS, ERROR_STATUS } from "../../constants/general";
import { fetchParameters } from "./parametersAPI";

const initialState = {
    parameters: [],
    status: IDLE_STATUS
};

export const fetchAllParameters = createAsyncThunk(
    'parameters/fetchParams',
    async () => {
      return await fetchParameters();
    }
  );

export const parametersSlice = createSlice({
    name: 'parameters',
    initialState,
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(fetchAllParameters.pending, (state) => {
            state.status = LOADING_STATUS;
        })
        .addCase(fetchAllParameters.fulfilled, (state, action) => {
            state.status = IDLE_STATUS;
            state.parameters = action.payload;
        })
        .addCase(fetchAllParameters.rejected, (state) => {
            state.status = ERROR_STATUS
        });
    },
  });

export default parametersSlice.reducer;
