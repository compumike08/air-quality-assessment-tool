import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { IDLE_STATUS, LOADING_STATUS, ERROR_STATUS } from "../../constants/general";
import { fetchLatestMeasurementsForCity } from "./cityViewAPI";

const initialState = {
    cityAResults: [],
    cityBResults: [],
    cityAStatus: IDLE_STATUS,
    cityBStatus: IDLE_STATUS
};

export const fetchCityAMeasurements = createAsyncThunk(
    'cityView/cityA/fetchLatestMeasurements',
    async (searchData) => {
      return await fetchLatestMeasurementsForCity(searchData.citySearchText, searchData.countryCode);
    }
  );

export const fetchCityBMeasurements = createAsyncThunk(
    'cityView/cityB/fetchLatestMeasurements',
    async (searchData) => {
      return await fetchLatestMeasurementsForCity(searchData.citySearchText, searchData.countryCode);
    }
  );

export const cityViewSlice = createSlice({
    name: 'cityView',
    initialState,
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(fetchCityAMeasurements.pending, (state) => {
            state.cityAStatus = LOADING_STATUS;
        })
        .addCase(fetchCityAMeasurements.fulfilled, (state, action) => {
            state.cityAStatus = IDLE_STATUS;
            state.cityAResults = action.payload;
        })
        .addCase(fetchCityAMeasurements.rejected, (state) => {
            state.cityAStatus = ERROR_STATUS
        })
        .addCase(fetchCityBMeasurements.pending, (state) => {
            state.cityBStatus = LOADING_STATUS;
        })
        .addCase(fetchCityBMeasurements.fulfilled, (state, action) => {
            state.cityBStatus = IDLE_STATUS;
            state.cityBResults = action.payload;
        })
        .addCase(fetchCityBMeasurements.rejected, (state) => {
            state.cityBStatus = ERROR_STATUS
        });
    },
  });

export default cityViewSlice.reducer;
